Example setup of a sphinxmix mixnet
===================================

For a minimal setup, let's consider four players: the server, two sphinxmix
contributors and an end user.

Start the server with:

  PANORAMIX_DATABASE=<db_file_path> panoramix-manage migrate
  PANORAMIX_DATABASE=<db_file_path> panoramix-manage runserver --nothreading


We will run the mixers and the end user in a terminal with their own
configuration: set environment variable PANORAMIX_CONFIG to some different
file in each terminal.

Run two instances of panoramix-wizard. Choose role 'admin' for the first
and 'contrib' for the second.

The admin must specify the list of mixers, the name of the mixnet, and the
min size of each mixing cycle.

The admin configures the mixnet setting up all related endpoints. The mixnet
waits for input at the endpoint:

  http://127.0.0.1:8000/panoramix/endpoints/<mixnet_name>/

and outputs the mixed messages at the endpoint:

  http://127.0.0.1:8000/panoramix/endpoints/<mixnet_name>_output/

Upon configuring mixnet name and min size, the contributor is also ready to
operate their mix.

You have set up a sphinxmix network with two mixes, in a static
configuration.

Then run sphimxmix-agent and initialize it with the mixnet URL. In another
terminal with the same PANORAMIX_CONFIG as the agent, run panoramix-client
and send some messages through the mixnet.

You can choose any string as recipient. After you send SIZE_MIN messages,
you can notice at the wizard terminals that the messages are being
processed.

Mixing is done in cycles. Messages that arrive at the input endpoint are
marked with the current cycle. After the required number of messages is
collected, the mixnet admin marks the cycle as ready for mixing and starts a
new cycle. Similarly, mixers process the messages in their respective cycles.

Messages are not actually sent to a recipient, but you can review the mixnet
output with:

  panoramix-client --output <cycle_id>

You can then acknowledge retrieving the messages, so that the mixnet can
safely delete them.

  panoramix-client --ack <cycle_id>
